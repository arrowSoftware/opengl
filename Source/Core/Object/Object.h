#pragma once

#include <string>
#include <iostream>
#include <sstream>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <GL/glew.h>
#include <GLUT/glut.h>
#include <GLFW/glfw3.h>

#include "ShaderProgram.h"

#define OBJECT(name) \
private: \
	std::string _className = #name; \
public: \
	std::string GetClassName(void) {return this->_className;}

class Object
{
	public:
        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
		Object(std::string argObjectName);

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
		virtual ~Object(void);

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
		std::string GetObjectName(void);

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
		virtual std::string GetClassName(void);

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
		glm::vec3 GetPosition(void);

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
		glm::vec3 GetRotation(void);

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
		glm::vec3 GetScale(void);

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
		glm::vec3 SetPosition(glm::vec3 argPosition);

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
		glm::vec3 SetRotation(glm::vec3 argRotation);

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
		glm::vec3 SetScale(glm::vec3 argScale);

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
		void Rotate(glm::vec3 argRotation);

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
		virtual void Draw(void) = 0;

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
        virtual void Initialize(void) = 0;

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
        virtual void Wrapup(void) = 0;

        ////////////////////////////////////////////////////////////////////////
        // Function:
        //
        // Description:
        //
        // Parameters:
        //
        // Returns:
        //
        ////////////////////////////////////////////////////////////////////////
        void UseShader(ShaderProgram &shader);

	protected:
		std::string _objectName;
		std::string _className;

		glm::vec3 _position;
		glm::vec3 _rotation;
		glm::vec3 _scale;

        ShaderProgram _shaderProgram;
        GLuint _uniformVP;
        GLuint _uniformModel;
};
